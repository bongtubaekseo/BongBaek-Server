name: Bongbaek CI with github actions & docker

on:
#  push:
#    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  integrate:
    runs-on: ubuntu-latest

    steps:
      # GitHub Actions Runner로 repository 내용을 복사
      - uses: actions/checkout@v4

      # 빌드를 위한 jdk21 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 빌드 성능 향상을 위한 Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 빌드에 필요한 리소스 파일 생성 및 작성
      - name: Generate application.yml
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          printf '%s' "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
        shell: bash

      # 빌드 수행(테스트 제외)
      - name: Build with gradle
        run: ./gradlew build -x test

      # 멀티플랫폼 빌드를 위한 QEMU 세팅
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # 도커 이미지 빌드를 위한 buildX 세팅
      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      # 도커 이미지 업로드를 위한 로그인
      - name: Docker Login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # 도커 이미지를 빌드하고 도커 허브에 업로드
      - name: Docker image build & push
        run: |
          docker buildx build \
          --platform linux/amd64 \
          --push \
          -t ${{ secrets.DOCKER_USERNAME }}/bongbaek-server .

      # 디렉토리 사전 생성
      - name: Ensure remote dir
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /home/ubuntu/bongbaek-server

      # docker-compose.yml 업로드
      - name: Upload docker-compose
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu/bongbaek-server"

      # EC2에 ssh 접속 후
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/bongbaek-server

            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}

            export DOZZLE_USERNAME=${{ secrets.DOZZLE_USERNAME }}

            export DOZZLE_PASSWORD=${{ secrets.DOZZLE_PASSWORD }}

            docker compose down

            docker compose pull

            docker compose up -d --remove-orphans

            docker image prune -f
